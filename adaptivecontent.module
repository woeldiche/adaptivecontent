<?php

function adaptivecontent_permission() {
  return array(
    'administer adaptivecontent' => array(
      'title' => t('Administer Adaptive Content'),
    )
  );
}

function adaptivecontent_menu() {
  $items = array();

  $items['admin/config/content/adaptivecontent'] = array(
    'title' => 'Adaptive Content',
    'description' => t('Adaptive Content presets.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adaptivecontent_preset_form'),
    'access arguments' => array('administer adaptivecontent'),
    'file' => 'adaptivecontent.preset.inc',
    'file path' => drupal_get_path('module', 'adaptivecontent') . '/includes',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/adaptivecontent/presets'] = array(
    'title' => 'Presets',
    'description' => t('Presets.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adaptivecontent_preset_form'),
    'access arguments' => array('administer adaptivecontent'),
    'file' => 'adaptivecontent.preset.inc',
    'file path' => drupal_get_path('module', 'adaptivecontent') . '/includes',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );


  $themes_info = list_themes();
  $themes = array();
  foreach ($themes_info as $key => $theme) {
    if ($theme->status) {
      $items['admin/config/content/adaptivecontent/presets/' . $key] = array(
        'title' => $theme->name,
        'type' => MENU_LOCAL_TASK,
        'description' => t('Presets for %theme theme.', array('%theme' => $theme->name)),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adaptivecontent_theme_preset_form', 5),
        'access arguments' => array('administer adaptivecontent'),
        'file' => 'adaptivecontent.preset.inc',
        'file path' => drupal_get_path('module', 'adaptivecontent') . '/includes',
      );
    }
  }

  $items['admin/config/content/adaptivecontent/settings'] = array(
    'title' => 'Settings',
    'description' => t('Adaptive Content settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adaptivecontent_setting_form'),
    'access arguments' => array('administer adaptivecontent'),
    'file' => 'adaptivecontent.setting.inc',
    'file path' => drupal_get_path('module', 'adaptivecontent') . '/includes',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function adaptivecontent_is_ajax($value = NULL) {
  $ajax = &drupal_static(__FUNCTION__);
  if (!isset($ajax)) {
    $ajax = isset($value) ? $value : FALSE;
  }
  return $ajax;
}

function adaptivecontent_load_configuration($theme_key= NULL) {
  if (!isset($theme_key)) {
    global $theme_key;
  }
  return variable_get('adaptivecontent_theme_' + $theme_key, array());
}

function adaptivecontent_init() {
  // @todo: is this an responsive callback ?
//  adaptivecontent_is_ajax(FALSE);
  adaptivecontent_is_ajax(TRUE);
}

function adaptivecontent_page_alter(&$page) {
  if (adaptivecontent_is_ajax()) {

    // Run drupal_page_alter on themes, as they will always come last. In the
    // drupal_alter function, but we need to have all regions avaliable now. So
    // do the same as drupal_alter does with the themes. An better solution may
    // exists..
    adaptivecontent_theme_page_alter('page_alter', $page);
    $main_content_display = &drupal_static('system_main_content_added', FALSE);
    if (!$main_content_display) {
        $page['content']['system_main'] = drupal_set_page_content();
    }

    // Render regions and return them as json arrays. @todo: load conf based on
    // preset information in ajax callback.
    $region = adaptivecontent_find_regions($page, array('menu' => 'menu'));

    // Make sure that all page level hook_preprocess_page and hook_process_page
    // are executed to ensure suff like menus and other theme variables are
    // genenrated for use in the regions rendered later on. This code is
    // basically taken from theme.inc.
    $hooks = theme_get_registry(FALSE);
    $hook = 'page';
    $info = $hooks[$hook];

    if (isset($info['base hook'])) {
      $base_hook = $info['base hook'];
      $base_hook_info = $hooks[$base_hook];
      if (isset($base_hook_info['preprocess functions']) || isset($base_hook_info['process functions'])) {
        $variables['theme_hook_suggestion'] = $hook;
        $hook = $base_hook;
        $info = $base_hook_info;
      }
    }

    if (isset($info['preprocess functions']) || isset($info['process functions'])) {
      $variables['theme_hook_suggestions'] = array();
      foreach (array('preprocess functions', 'process functions') as $phase) {
        if (!empty($info[$phase])) {
          foreach ($info[$phase] as $processor_function) {
            if (function_exists($processor_function)) {
              // We don't want a poorly behaved process function changing $hook.
              $hook_clone = $hook;
              $processor_function($variables, $hook_clone);
            }
          }
        }
      }
      // This allows the preprocess/process step to route to a more specific
      // theme hook.
      $suggestions = array();
      if (!empty($variables['theme_hook_suggestions'])) {
        $suggestions = $variables['theme_hook_suggestions'];
      }
      if (!empty($variables['theme_hook_suggestion'])) {
        $suggestions[] = $variables['theme_hook_suggestion'];
      }
      foreach (array_reverse($suggestions) as $suggestion) {
        if (isset($hooks[$suggestion])) {
          $info = $hooks[$suggestion];
          break;
        }
      }
    }

    // Render the regions.
    drupal_json_output(array('menu' => drupal_render($page['header']['menu']['menu'])));

    drupal_exit();
  }

  // Load configuration.
  $conf = adaptivecontent_load_configuration();

  // Load regions from theme (omega do some suff that requires us to work on
  // copy). This creates some problem with the normal, where the theme have to
  // ensure that it do not call these them self... see patch for alpha.
  adaptivecontent_theme_page_alter('page_alter', $page);
  adaptivecontent_disable_regions($page, $conf['core']['regions']);
}

function adaptivecontent_disable_regions(&$data, $regions) {
  // @todo: apply cache to speed up walker based on preset. Make the optional.
  $keys = array_keys($data);
  foreach ($keys as $key) {
    if ((!preg_match('/^#/', $key)) && is_array($data[$key])) {
      if (isset($data[$key]['#region'])) {
        if (isset($regions[$key]) && $regions[$key] == '0') {
          $data[$key]['#access'] = FALSE;

          // Place makers in regions to ajax load regions to create place holders and
          // enble theme.
        }
      }
      adaptivecontent_disable_regions($data[$key], $regions);
    }
  }
}

function adaptivecontent_find_regions(&$data, $regions) {
  // @todo: apply cache to speed up walker based on preset. Make the optional.
  $array = array();
  $keys = array_keys($data);
  foreach ($keys as $key) {
    if ((!preg_match('/^#/', $key)) && is_array($data[$key])) {
      if (isset($data[$key]['#region']) && isset($regions[$key])) {
        $array[$key] = $data[$key];
        // $array[] = render array for region.

        // pop $regions
        unset($regions[$key]);

        // If $regions empty break loop, no more finding need.
        if (empty($regions)) {
          break;
        }
      }
      $array[] = adaptivecontent_find_regions($data[$key], $regions);
    }
  }
  return $array;
}

function adaptivecontent_theme_page_alter($hook, &$data) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['functions'] = &drupal_static('drupal_alter');
  }
  $functions = &$drupal_static_fast['functions'];

  global $theme, $base_theme_info;
  $theme_alters = array();
  if (isset($theme)) {
    $theme_keys = array();
    foreach ($base_theme_info as $base) {
      $theme_keys[] = $base->name;
    }
    $theme_keys[] = $theme;
    foreach ($theme_keys as $theme_key) {
      $function = $theme_key . '_' . $hook;
      if (function_exists($function)) {
        $theme_alters[] = $function;
      }
    }
  }

  // Call hooks and save theme in the cache.
  foreach ($theme_alters as $function) {
    $function($data);
    $functions[$hook][] = $function;
  }
}
